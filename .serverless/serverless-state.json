{
  "service": {
    "service": "all-star",
    "serviceObject": {
      "name": "all-star"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "environment": {
        "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
        "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
        "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
        "STRIPE_WEBHOOK_SECRET": "hello",
        "STRIPE_WEBHOOK_PATH": "secret_webhook"
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetCustomerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-getCustomer"
            }
          },
          "CreateSubscriptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-createSubscription"
            }
          },
          "DeleteSubscriptionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-deleteSubscription"
            }
          },
          "CreateWebhookLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-createWebhook"
            }
          },
          "ProcessWebhookLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-processWebhook"
            }
          },
          "UpdateSubscriptionStatusLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-updateSubscriptionStatus"
            }
          },
          "GetUserLogsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/all-star-dev-getUserLogs"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "all-star",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/all-star-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/all-star-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "all-star",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetCustomerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/stripe.getCustomer",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-getCustomer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "retrieve stripe customer detail",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCustomerLogGroup"
            ]
          },
          "CreateSubscriptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/stripe.createSubscription",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-createSubscription",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "creates stripe subscription for a given user email",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateSubscriptionLogGroup"
            ]
          },
          "DeleteSubscriptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/stripe.deleteSubscription",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-deleteSubscription",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "deletes a given stripe subscription",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteSubscriptionLogGroup"
            ]
          },
          "CreateWebhookLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/stripe.createWebhook",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-createWebhook",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "creates stripe webhook",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateWebhookLogGroup"
            ]
          },
          "ProcessWebhookLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/stripe.processWebhook",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-processWebhook",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "processes received stripe webhook",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ProcessWebhookLogGroup"
            ]
          },
          "UpdateSubscriptionStatusLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/user.subscriptionStatus",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-updateSubscriptionStatus",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "sets the subscription status for a user. Not recommended",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateSubscriptionStatusLogGroup"
            ]
          },
          "GetUserLogsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z/all-star.zip"
              },
              "Handler": "handlers/user.userLog",
              "Runtime": "nodejs12.x",
              "FunctionName": "all-star-dev-getUserLogs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "gets a user's transaction logs",
              "Environment": {
                "Variables": {
                  "STRIPE_KEY": "sk_test_51J0DOOCTcNp75qbeTqtQ69cLx8DLnryk94viTtpQvybygGp4nBe6r364Wbl89vcbgMcSEOxM00yXLRR6MvJUsjNT00yXHV0TM5",
                  "PRICE_ID_SUB": "price_1J0DQ0CTcNp75qbeedCohE3N",
                  "DB_URL": "mongodb+srv://test:test@cluster0.goo91.mongodb.net/test?retryWrites=true&w=majority",
                  "STRIPE_WEBHOOK_SECRET": "hello",
                  "STRIPE_WEBHOOK_PATH": "secret_webhook"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogsLogGroup"
            ]
          },
          "CreateSubscriptionLambdaVersiontAsbSjw5vLDDOSTzcoT9hG59XUGX1MiML2vKopCs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateSubscriptionLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "creates stripe subscription for a given user email"
            }
          },
          "CreateWebhookLambdaVersionUPDiJ1iVQ9UGGTm5eqQAcnjWOldnmHc1VQv7rbUGiI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateWebhookLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "creates stripe webhook"
            }
          },
          "UpdateSubscriptionStatusLambdaVersionrXJFqmpvkbYAnr4UfaMDn9QXyySNTZu2Z2MYA2zvlE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateSubscriptionStatusLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "sets the subscription status for a user. Not recommended"
            }
          },
          "DeleteSubscriptionLambdaVersionwNlWMxjRilQOOzO2zJ5pUt4ilQJ9p0hGEkl8KR7Rg0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteSubscriptionLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "deletes a given stripe subscription"
            }
          },
          "ProcessWebhookLambdaVersionev0AUH4bSdtfU3utkdjXRJZmnVzzX946dpFNQtM7HM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProcessWebhookLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "processes received stripe webhook"
            }
          },
          "GetUserLogsLambdaVersionvACb33kLCtjzJKXysytCSoMdbQ7VTbBXPlNuxPihs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLogsLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "gets a user's transaction logs"
            }
          },
          "GetCustomerLambdaVersiongKsCpyvSypfgrXJaqACJWU8NcgVfKtgWaOj2sOMnY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCustomerLambdaFunction"
              },
              "CodeSha256": "ejT5a93ph8D6wS4EeGFAEz+KecWpA8c0uagsj7usJZM=",
              "Description": "retrieve stripe customer detail"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-all-star",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceCustomers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "customers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCustomersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCustomers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubscriptions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "subscriptions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSubscriptionsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSubscriptions"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWebhooks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "webhooks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSecretDashwebhook": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "secret-webhook",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserIdVarLogs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserIdVar"
              },
              "PathPart": "logs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSubscriptionsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubscriptions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSubscriptionsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubscriptionsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWebhooksOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhooks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSecretDashwebhookOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretDashwebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUserIdVarLogsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVarLogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCustomersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCustomersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetCustomerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSubscriptionsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubscriptions"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateSubscriptionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSubscriptionsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSubscriptionsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteSubscriptionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodWebhooksPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWebhooks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateWebhookLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodSecretDashwebhookPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSecretDashwebhook"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProcessWebhookLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateSubscriptionStatusLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUserIdVarLogsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserIdVarLogs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserLogsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1623688401172": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodCustomersIdVarOptions",
              "ApiGatewayMethodSubscriptionsOptions",
              "ApiGatewayMethodSubscriptionsIdVarOptions",
              "ApiGatewayMethodWebhooksOptions",
              "ApiGatewayMethodSecretDashwebhookOptions",
              "ApiGatewayMethodUserOptions",
              "ApiGatewayMethodUserIdVarLogsOptions",
              "ApiGatewayMethodCustomersIdVarGet",
              "ApiGatewayMethodSubscriptionsPost",
              "ApiGatewayMethodSubscriptionsIdVarDelete",
              "ApiGatewayMethodWebhooksPost",
              "ApiGatewayMethodSecretDashwebhookPost",
              "ApiGatewayMethodUserPost",
              "ApiGatewayMethodUserIdVarLogsGet"
            ]
          },
          "GetCustomerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCustomerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateSubscriptionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateSubscriptionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteSubscriptionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteSubscriptionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateWebhookLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateWebhookLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProcessWebhookLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProcessWebhookLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateSubscriptionStatusLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateSubscriptionStatusLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserLogsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLogsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-all-star-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateSubscriptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateSubscriptionLambdaVersiontAsbSjw5vLDDOSTzcoT9hG59XUGX1MiML2vKopCs"
            },
            "Export": {
              "Name": "sls-all-star-dev-CreateSubscriptionLambdaFunctionQualifiedArn"
            }
          },
          "CreateWebhookLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateWebhookLambdaVersionUPDiJ1iVQ9UGGTm5eqQAcnjWOldnmHc1VQv7rbUGiI"
            },
            "Export": {
              "Name": "sls-all-star-dev-CreateWebhookLambdaFunctionQualifiedArn"
            }
          },
          "UpdateSubscriptionStatusLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateSubscriptionStatusLambdaVersionrXJFqmpvkbYAnr4UfaMDn9QXyySNTZu2Z2MYA2zvlE"
            },
            "Export": {
              "Name": "sls-all-star-dev-UpdateSubscriptionStatusLambdaFunctionQualifiedArn"
            }
          },
          "DeleteSubscriptionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteSubscriptionLambdaVersionwNlWMxjRilQOOzO2zJ5pUt4ilQJ9p0hGEkl8KR7Rg0"
            },
            "Export": {
              "Name": "sls-all-star-dev-DeleteSubscriptionLambdaFunctionQualifiedArn"
            }
          },
          "ProcessWebhookLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProcessWebhookLambdaVersionev0AUH4bSdtfU3utkdjXRJZmnVzzX946dpFNQtM7HM"
            },
            "Export": {
              "Name": "sls-all-star-dev-ProcessWebhookLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLogsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLogsLambdaVersionvACb33kLCtjzJKXysytCSoMdbQ7VTbBXPlNuxPihs"
            },
            "Export": {
              "Name": "sls-all-star-dev-GetUserLogsLambdaFunctionQualifiedArn"
            }
          },
          "GetCustomerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCustomerLambdaVersiongKsCpyvSypfgrXJaqACJWU8NcgVfKtgWaOj2sOMnY"
            },
            "Export": {
              "Name": "sls-all-star-dev-GetCustomerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-all-star-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getCustomer": {
        "handler": "handlers/stripe.getCustomer",
        "description": "retrieve stripe customer detail",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "customers/{id}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-getCustomer",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetCustomerLambdaVersiongKsCpyvSypfgrXJaqACJWU8NcgVfKtgWaOj2sOMnY"
      },
      "createSubscription": {
        "handler": "handlers/stripe.createSubscription",
        "description": "creates stripe subscription for a given user email",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "subscriptions",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-createSubscription",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateSubscriptionLambdaVersiontAsbSjw5vLDDOSTzcoT9hG59XUGX1MiML2vKopCs"
      },
      "deleteSubscription": {
        "handler": "handlers/stripe.deleteSubscription",
        "description": "deletes a given stripe subscription",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "subscriptions/{id}",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-deleteSubscription",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "DeleteSubscriptionLambdaVersionwNlWMxjRilQOOzO2zJ5pUt4ilQJ9p0hGEkl8KR7Rg0"
      },
      "createWebhook": {
        "handler": "handlers/stripe.createWebhook",
        "description": "creates stripe webhook",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "webhooks",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-createWebhook",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CreateWebhookLambdaVersionUPDiJ1iVQ9UGGTm5eqQAcnjWOldnmHc1VQv7rbUGiI"
      },
      "processWebhook": {
        "handler": "handlers/stripe.processWebhook",
        "description": "processes received stripe webhook",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "secret-webhook",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-processWebhook",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ProcessWebhookLambdaVersionev0AUH4bSdtfU3utkdjXRJZmnVzzX946dpFNQtM7HM"
      },
      "updateSubscriptionStatus": {
        "handler": "handlers/user.subscriptionStatus",
        "description": "sets the subscription status for a user. Not recommended",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "user",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-updateSubscriptionStatus",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateSubscriptionStatusLambdaVersionrXJFqmpvkbYAnr4UfaMDn9QXyySNTZu2Z2MYA2zvlE"
      },
      "getUserLogs": {
        "handler": "handlers/user.userLog",
        "description": "gets a user's transaction logs",
        "events": [
          {
            "http": {
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "path": "user/{id}/logs",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "all-star-dev-getUserLogs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetUserLogsLambdaVersionvACb33kLCtjzJKXysytCSoMdbQ7VTbBXPlNuxPihs"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/ladna/Projects/allstar/.serverless/all-star.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/all-star/dev/1623688408191-2021-06-14T16:33:28.191Z",
    "artifact": "all-star.zip"
  }
}